rule "Dining Motion ON"
when
    Item DiningRoomMotionSensor received update OPEN
then
	val aSunsetHourMinusOne = new DateTime(vSunset_Time.state.toString).getHourOfDay - 1
	val aSunriseHourPlusOne = new DateTime(vSunrise_Time.state.toString).getHourOfDay + 1
    val anEveningTime = (now.getHourOfDay >= aSunsetHourMinusOne) && (now.getHourOfDay <= 23)
    val aMorningTime = (now.getHourOfDay >= 6) && (now.getHourOfDay <= aSunriseHourPlusOne)
   	logWarn("Bigboxer23", "Dining Room Motion Triggered " + NorthAccent.state + " " + DiningRoomMotionTimer.state + " " + aSunsetHourMinusOne + " " + now.getHourOfDay + " " + aSunriseHourPlusOne)
    if (NorthAccent.state == 0 && (anEveningTime || aMorningTime) && DiningRoomMotionOverride.state != ON)
    {
        logWarn("Bigboxer23", "Dining Room Motion timer is inactive, triggering lights " + (NorthAccent.state == 0) + " " + (NorthAccent.state === 0) + (NorthAccent.state == "0"))
        NorthAccent.sendCommand(100)
        Chandelier.sendCommand(100)
        SouthAccent.sendCommand(100)
    }
    DiningRoomMotionTimer.sendCommand(OFF)
end

rule "Dining Motion CLOSED"
when
    Item DiningRoomMotionSensor received update CLOSED
then
	logWarn("Bigboxer23", "Dining Room Motion sensor closed, setting timer")
    DiningRoomMotionTimer.sendCommand(ON)
end

rule "Dining Motion OFF"
when
    Item DiningRoomMotionTimer received update OFF
then
	if (DiningRoomMotionSensor.state === CLOSED && DiningRoomMotionOverride.state != ON)
	{
	    logWarn("Bigboxer23", "DiningRoomMotionTimer Off, CLOSED, shutting off lights")
	    NorthAccent.sendCommand(0)
	    Chandelier.sendCommand(0)
	    SouthAccent.sendCommand(0)
    } else
    {
        logWarn("Bigboxer23", "Dining Room Motion is OPEN, not shutting off lights " + DiningRoomMotionOverride.state + " " + DiningRoomMotionSensor.state)
    }
end
